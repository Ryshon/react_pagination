{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","countOfPages","Math","ceil","pages","isLastPage","isFirstPage","prevPage","nextPage","handlePageChange","page","className","classNames","disabled","href","onClick","map","active","items","perPageSelector","App","useState","setPerPage","setCurrentPage","maxItems","firstItem","lastItem","id","value","onChange","event","target","selector","htmlFor","slice","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCFIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAiBJ,EAAQC,IAAa,EACxCD,EAAQC,EACRI,KAAKC,KAAKN,EAAQC,GAEhBM,EAAQd,EAAW,EAAGW,GAEtBI,EAAaN,IAAgBE,EAC7BK,EAA8B,IAAhBP,EACdQ,EAAWR,EAAc,EAEzBS,EAAWT,EAAc,EAEzBU,EAAmB,SAACC,GACpBA,IAASX,GAAeW,EAAOT,GAAgBS,EAAO,GAI1DV,EAAaU,IAGf,OACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CAAEC,SAAUP,IAAnD,SACE,mBACE,UAAQ,WACRK,UAAU,YACVG,KAAI,WAAMP,GACV,gBAAeD,EACfS,QAAS,kBAAMN,EAAiBF,IALlC,oBAUDH,EAAMY,KAAI,SAAAN,GAAI,OACb,oBACEC,UAAWC,IAAW,YAAa,CAAEK,OAAQlB,IAAgBW,IAD/D,SAIE,mBACE,UAAQ,WACRC,UAAU,YACVG,KAAI,WAAMJ,GACVK,QAAS,kBAAMf,EAAaU,IAJ9B,SAMGA,KAREA,MAaT,oBAAIC,UAAWC,IAAW,YAAa,CAAEC,SAAUR,IAAnD,SACE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAI,WAAMN,GACV,gBAAeH,EACfU,QAAS,kBAAMN,EAAiBD,IALlC,wBCvDFU,EAAQ5B,EAAW,EAAG,IACzB0B,KAAI,SAAAtB,GAAC,qBAAYA,MAGdyB,EAAkB,CAAC,EAAG,EAAG,GAAI,IAEtBC,EAAgB,WAC3B,MAA8BC,mBAASF,EAAgB,IAAvD,mBAAOrB,EAAP,KAAgBwB,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOtB,EAAP,KAAoBwB,EAApB,KAEMC,EAAWzB,EAAcD,EACzB2B,EAAYD,EAAW1B,EACvB4B,EAAWF,EATA,MAWbA,EAYJ,OACE,sBAAKb,UAAU,YAAf,UACE,uDACA,mBACEA,UAAU,OACV,UAAQ,OAFV,wBAIWZ,EAJX,mBAIiC0B,EAAY,EAJ7C,cAIoDC,EAJpD,eA1Ba,GA0Bb,OAOA,sBACEf,UAAU,mBADZ,UAME,qBACEA,UAAU,4BADZ,SAOE,wBACE,UAAQ,kBACRgB,GAAG,kBACHhB,UAAU,eACViB,MAAO9B,EACP+B,SAtCW,SAACC,GACpBR,GAAYQ,EAAMC,OAAOH,OAEzBL,EAAe,IA8BT,SAOGJ,EAAgBH,KAAI,SAAAgB,GAAQ,OAC3B,wBACEJ,MAAOI,EADT,SAIGA,GAFIA,UAQb,uBACEC,QAAQ,kBACRtB,UAAU,qBAFZ,+BAQF,cAAC,EAAD,CACEd,MAzEW,GA0EXC,QAASA,EACTC,YAAaA,EACbC,aAzDe,SAACU,GACpBa,EAAeb,MA0Db,6BACGQ,EAAMgB,MAAMT,EAAWC,GAAUV,KAAI,SAAAmB,GAAI,OACxC,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCxFjBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1ed92a2c.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils';\nimport { Props } from '../types';\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const countOfPages = ((total % perPage) === 0)\n    ? total / perPage\n    : Math.ceil(total / perPage);\n\n  const pages = getNumbers(1, countOfPages);\n\n  const isLastPage = currentPage === countOfPages;\n  const isFirstPage = currentPage === 1;\n  const prevPage = currentPage - 1;\n\n  const nextPage = currentPage + 1;\n\n  const handlePageChange = (page: number) => {\n    if (page === currentPage || page > countOfPages || page < 1) {\n      return;\n    }\n\n    onPageChange(page);\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item', { disabled: isFirstPage })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href={`#${prevPage}`}\n          aria-disabled={isFirstPage}\n          onClick={() => handlePageChange(prevPage)}\n        >\n          «\n        </a>\n      </li>\n      {pages.map(page => (\n        <li\n          className={classNames('page-item', { active: currentPage === page })}\n          key={page}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li className={classNames('page-item', { disabled: isLastPage })}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href={`#${nextPage}`}\n          aria-disabled={isLastPage}\n          onClick={() => handlePageChange(nextPage)}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nconst totalPages = 42;\nconst perPageSelector = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(perPageSelector[1]);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const maxItems = currentPage * perPage;\n  const firstItem = maxItems - perPage;\n  const lastItem = maxItems > totalPages\n    ? totalPages\n    : maxItems;\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n\n    setCurrentPage(1);\n  };\n\n  const onPageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n      <p\n        className=\"lead\"\n        data-cy=\"info\"\n      >\n        {`Page ${currentPage} (items ${firstItem + 1} - ${lastItem} of ${totalPages})`}\n      </p>\n\n      <div\n        className=\"\n           form-group\n           row\n         \"\n      >\n        <div\n          className=\"\n             col-3\n             col-sm-2\n             col-xl-1\n           \"\n        >\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handleChange}\n          >\n            {perPageSelector.map(selector => (\n              <option\n                value={selector}\n                key={selector}\n              >\n                {selector}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label\n          htmlFor=\"perPageSelector\"\n          className=\"col-form-label col\"\n        >\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={totalPages}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={onPageChange}\n      />\n      <ul>\n        {items.slice(firstItem, lastItem).map(item => (\n          <li\n            data-cy=\"item\"\n            key={item}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}